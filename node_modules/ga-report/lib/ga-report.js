// Generated by CoffeeScript 1.6.3
"use strict";
var Report, events, request, util;

request = require('request');

events = require('events');

util = require('util');

Report = function(config) {
  var _this = this;
  events.EventEmitter.call(this);
  if ((config != null ? config.username : void 0) && (config != null ? config.password : void 0)) {
    this.getToken(config.username, config.password, function(err, token) {
      if (err) {
        return _this.emit('error', err);
      }
      _this.tokenType = 'GoogleLogin';
      _this.token = token;
      return _this.emit('ready');
    });
  } else {
    this.emit('error', new Error('Not Supported'));
  }
  return this;
};

util.inherits(Report, events.EventEmitter);

module.exports = Report;

Report.prototype.getToken = function(username, password, cb) {
  var data, url;
  url = 'https://www.google.com/accounts/ClientLogin';
  data = {
    Email: username,
    Passwd: password,
    accountType: "HOSTED_OR_GOOGLE",
    source: "curl-accountFeed-v2",
    service: "analytics"
  };
  return request.post(url, {
    form: data
  }, function(err, res, data) {
    var m;
    m = data.match(/(Auth=[^\s]*)\s/);
    if (m) {
      return cb(null, m[1]);
    }
    return cb(new Error('Authentication Failed'));
  });
};

Report.prototype.getAccounts = function(cb) {
  var options;
  options = {
    url: 'https://www.googleapis.com/analytics/v3/management/accounts',
    json: true,
    headers: {
      Authorization: this.tokenType + " " + this.token,
      "GData-Version": 2
    }
  };
  return request(options, function(err, res, data) {
    if (data != null ? data.items : void 0) {
      return cb(null, data.items);
    }
    return cb(new Error('Command Failed'));
  });
};

Report.prototype.getWebproperties = function(accountId, cb) {
  var options;
  options = {
    url: 'https://www.googleapis.com/analytics/v3/management/accounts/' + accountId + '/webproperties',
    json: true,
    headers: {
      Authorization: this.tokenType + " " + this.token,
      "GData-Version": 2
    }
  };
  return request(options, function(err, res, data) {
    if (data != null ? data.items : void 0) {
      return cb(null, data.items);
    }
    return cb(new Error('Command Failed'));
  });
};

Report.prototype.getProfiles = function(accountId, webpropertyId, cb) {
  var options;
  options = {
    url: 'https://www.googleapis.com/analytics/v3/management/accounts/' + accountId + '/webproperties/' + webpropertyId + '/profiles',
    json: true,
    headers: {
      Authorization: this.tokenType + " " + this.token,
      "GData-Version": 2
    }
  };
  return request(options, function(err, res, data) {
    if (data != null ? data.items : void 0) {
      return cb(null, data.items);
    }
    return cb(new Error('Command Failed'));
  });
};

Report.prototype.get = function(options, cb) {
  var args, key, val;
  args = [];
  for (key in options) {
    val = options[key];
    args.push(key + '=' + encodeURIComponent(val));
  }
  options = {
    url: 'https://www.googleapis.com/analytics/v3/data/ga?' + args.join('&'),
    json: true,
    headers: {
      Authorization: this.tokenType + " " + this.token,
      "GData-Version": 2
    }
  };
  return request(options, function(err, res, data) {
    if (data) {
      return cb(null, data);
    }
    return cb(new Error('Command Failed'));
  });
};
